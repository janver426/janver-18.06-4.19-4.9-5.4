#
#
# 感谢p3terx大神的一键编译脚本
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# <https://github.com/P3TERX/Actions-OpenWrt.git>
#
#修改以下代码或者开启触发开关都好，要严格按格式对好,前面有多少空格也要看清楚
#代码里有 name: 后面的内容随便改,冒号后面是有个空格的,如果修改固件名字就要考虑能不能显示出你想要的


name: 18.06-4.19/4.9-OpenWrt 固件

on:
  release:
    types: [published]
  push:
    branches:
      - master
    paths:
      - 'janver-419-49.config'

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-18.06-k5.4
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: janver-419-49.config
  DIY_OP_SH: janver-419-49.sh 
  UPLOAD_BIN_DIR: true
  UPLOAD_CONFIG: true
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    name: 编译OpenWrt-18.06固件
    runs-on: ubuntu-18.04
    if: github.event.repository.owner.id == github.event.sender.id
     
    steps:
    - name: 准备结束
      uses: actions/checkout@v3

    - name: 开始安装编译所需系统
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: 下载固件源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH immortalwrt
        ln -sf /workdir/immortalwrt $GITHUB_WORKSPACE/immortalwrt

    - name: 加载feeds跟自定义插件
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF immortalwrt/feeds.conf.default
        chmod +x $DIY_OP_SH
        cd immortalwrt
        $GITHUB_WORKSPACE/$DIY_OP_SH

    - name: 下载feeds自定义插件
      run: cd immortalwrt && ./scripts/feeds update -a
      
    - name: 安装feeds自定义插件  
      run: cd immortalwrt && ./scripts/feeds install -a

    - name: 加载janver-419-49.config设置
      run: |
        [ -e files ] && mv files immortalwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE immortalwrt/.config

    - name: 下载软件包
      id: package
      run: |
        cd immortalwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 开始编译固件
      id: compile
      run: |
        cd immortalwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: 检查github储存空间情况
      if: (!cancelled())
      run: df -hT

    - name: 上传bin文件夹(固件+ipk)在github空间
      uses: actions/upload-artifact@v3
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: immortalwrt_bin_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        path: immortalwrt/bin

    - name: 提取config.buildinfo配置文件
      id: config
      run: |
          rm -rf config && mkdir config
          find immortalwrt/bin/targets/ -name "*config.buildinfo*" | xargs -i mv -f {} config
          echo "::set-output name=status::success"
          
    - name: 上传.config配置文件在github空间    
      if: steps.config.outputs.status == 'success' && env.UPLOAD_CONFIG == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: config.buildinfo_${{ env.FILE_DATE }}
        path: ./config

    - name: 整理固件文件夹
      id: organizer
      run: |
        cd immortalwrt/bin/targets/*/*
        rm -rf packages && mkdir packages
        find -name "*.buildinfo*" | xargs -i mv -f {} packages
        find -name "*sha256sums*" | xargs -i mv -f {} packages
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"
        
    - name: 上传固件在github空间
      uses: actions/upload-artifact@v3
      if: steps.organizer.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true'
      with:
        name: immortalwrt_firmware_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 上传固件到奶牛快传
      id: cowtransfer
      if: steps.organizer.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=↓↓无需注册直接下载↓↓奶牛快传下载地址↓↓::$(cat cowtransfer.log | grep https)"
        echo "::set-output name=url::$(cat cowtransfer.log | grep https | cut -f3 -d" ")"

    - name: 上传固件到WeTransfer
      id: wetransfer
      if: steps.organizer.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=↓↓无需注册直接下载↓↓wetransfer下载地址↓↓::$(cat wetransfer.log | grep https)"
        echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"
    
    - name: 生成版本标记
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "::set-output name=status::success"
        
    - name: 上传固件发布
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        name: ${{ steps.tag.outputs.release_date }} x86-64-Linux-${{ steps.generate.outputs.kernel_version }} 固件
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: 删除工作流运行
      uses: Mattraks/delete-workflow-runs@v2
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: 删除旧版本
      uses: dev-drprasad/delete-older-releases@v0.2.1
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
